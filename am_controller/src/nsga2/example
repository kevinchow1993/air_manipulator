void trajectory_evaluate_model(double *xreal,
	                    double *xbin,
	                    int **gene,
	                    double *obj,
	                    double *constr) 
	{
	    double x1 = xreal[0];//(xreal[0]-0.5)*2*5.12;
	    double x2 = xreal[1];//(xreal[1]-0.5)*2*5.12;
	    x1 = floor(x1*10)/10.0;
	    x2 = floor(x2*10)/10.0;
	    double A = 10;
	    obj[0] = -(A*2 + ( (x1*x1 - A * std::cos(2*PI*x1)) +
			      (x2*x2 - A * std::cos(2*PI*x2))));
	    // constr[0]=x2-5;//x2>5
	    constr[0]=x2-x1;//x2>x1
	    return;
	}
void NSGA2_Trajectory_optmal()
{

		      nsga2::individual_config conf;
		    // conf.nreal = 2;
		    // conf.nbin  = 0;
		    // conf.ncon  = 0;
		    // //conf.nbits = 0;
		    // conf.nobj  = 1;
		    // conf.pmut_real = 1;
		    // conf.eta_m = 10;
		    conf.limits_realvar.push_back(make_pair(-5.12,5.12));
		    conf.limits_realvar.push_back(make_pair(-5.12,5.12));
		    
		    int seed = time(0);
		    cout << "Using seed " << seed << endl;

		    nsga2::NSGA2 nsga2_opt;
		    nsga2_opt.set_seed(seed);
		    nsga2_opt.set_nreal(2);
		    nsga2_opt.set_nbin(0);
		    nsga2_opt.set_nobj(1);
		    nsga2_opt.set_ncon(1); // add a constraint due to possible simulation failures
		    nsga2_opt.set_popsize(100);
		    nsga2_opt.set_ngen(50);
		    nsga2_opt.set_pcross_real(1.0);
		    nsga2_opt.set_pcross_bin(0.0);
		    nsga2_opt.set_pmut_real(0.3);
		    nsga2_opt.set_pmut_bin(0.0);
		    nsga2_opt.set_eta_c(10);
		    nsga2_opt.set_eta_m(10);
		    nsga2_opt.set_epsilon_c(1e-14);
		    //nsga2.set_nbits(0);
		    nsga2_opt.set_limits_realvar(conf.limits_realvar);
		    // nsga2.set_limits_binvar(limits_binvar);
		    // nsga2.set_function(&evaluate_model);
		    // void *function_addr=union_cast<void*>(&flx_trajectory_planner::trajectory_evaluate_model);
		    // cout<<function_addr<<endl;
		    // nsga2.set_function((nsga2::individual_config::funcType)function_addr);
		    // nsga2_opt.set_function(union_cast<nsga2::individual_config::funcType>(&flx_trajectory_planner::trajectory_evaluate_model));
		    nsga2_opt.set_function(&trajectory_evaluate_model);
		    nsga2_opt.set_crowdobj(false); // crowd over the parameters, not the objective functions
		    //nsga2.set_crowdobj(true); // crowd over objective function
		    // nsga2.set_seed(seed);
		    // nsga2.set_popfunction(&evaluate_population);
		    // nsga2.set_custom_report_function(&update_generation);
		    // nsga2.set_nreport(10);
		    nsga2_opt.set_backup_filename(""); // no backup

		    
		    nsga2_opt.initialize();
		    nsga2_opt.evolve();
		    std::vector<nsga2::individual>::const_iterator it_pop;
		    it_pop=nsga2_opt.parent_pop->ind.begin();
		    cout<<"obj0:"<<it_pop->obj[0]<<endl;
		    cout<<"rv1:"<<it_pop->xreal[0]<<endl;
		    cout<<"rv2:"<<it_pop->xreal[1]<<endl;
		    
		
}


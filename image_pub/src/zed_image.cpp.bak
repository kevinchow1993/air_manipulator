#include <ros/ros.h>
#include <image_transport/image_transport.h>
#include <opencv2/opencv.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <boost/array.hpp>
#include <cv_bridge/cv_bridge.h>
#include <vector>

#define WIDTH_ID 3
#define HEIGHT_ID 4
#define FPS_ID 5

cv::Mat frame;


bool getImages(cv::Mat& left_image, cv::Mat& right_image) 
{
	cv::Rect left_rect(0, 0, 1344/2, 376);
	cv::Rect right_rect(1344/2, 0, 1344/2, 376);
	left_image = frame(left_rect);
	right_image = frame(right_rect);	
}


int main(int argc, char **argv)
{
	ros::init(argc,argv, "zed_image_pub");
	ros::NodeHandle nh;

	//打开摄像头的参数
	cv::VideoCapture cap(1);
	if(!cap.isOpened())
	{
		ROS_ERROR("Open camera error");
		return -1;
	}

	cap.set(WIDTH_ID,1344);
	cap.set(HEIGHT_ID,376);
	cap.set(FPS_ID,20);


	ros::Rate rate(10);

	image_transport::ImageTransport it(nh);
	image_transport::CameraPublisher l_pub = it.advertiseCamera("/camera/left/image_raw",10);
	image_transport::CameraPublisher r_pub = it.advertiseCamera("/camera/right/image_raw",10);

	sensor_msgs::ImagePtr l_image;
	sensor_msgs::ImagePtr r_image;

	sensor_msgs::CameraInfoPtr  l_info(new sensor_msgs::CameraInfo);
	sensor_msgs::CameraInfoPtr  r_info(new sensor_msgs::CameraInfo);

	//摄像头的内外参数
	boost::array<double,9> l_k = {{349.41816857728236, 0.000000, 342.140508363061, 0.000000, 350.62807616445417, 186.59820397079244, 0.000000, 0.000000, 1.000000}};
	double l_d[5] = {0.14309163251264367, 0.04373020065623024, -0.14366113773707925,0.09696085960493576, 0.000000};
	std::vector<double> l_distor(l_d,l_d + 5);

	l_info->K =  l_k;
	l_info->width  = 1344/2;
	l_info->height = 376;
	l_info->D = l_distor;

	boost::array<double,9> r_k = {{346.25189574347587, 0.000000, 349.6045364163396, 0.000000, 346.9843723550673, 201.10081915874892, 0.000000, 0.000000, 1.000000}};
	double r_d[5] = {0.1829784858342939, -0.134558381064257, 0.19269159597312369,-0.12205714890703864, 0.000000};
	std::vector<double> r_distor(r_d,r_d + 5);

	r_info->K =  r_k;
	r_info->width  = 1344/2;
	r_info->height = 376;
	r_info->D = r_distor;

	cv::Mat left, right;

	while(nh.ok())
	{
		cap >>frame;
		//ROS_WARN("%d---%d",frame.cols, frame.rows);

		if(!frame.empty())
		{

			getImages(left,right);

			l_image = cv_bridge::CvImage(std_msgs::Header(), "bgr8", left).toImageMsg();
			l_image->header.stamp =  ros::Time::now();
			l_info->header.stamp = ros::Time::now();
			l_pub.publish(l_image,l_info);
		
			r_image = cv_bridge::CvImage(std_msgs::Header(), "bgr8", right).toImageMsg();
			r_image->header.stamp = ros::Time::now();
			r_info->header.stamp = ros::Time::now();
			r_pub.publish(r_image,r_info);
		}

		rate.sleep();
	}
	return 0;
}
